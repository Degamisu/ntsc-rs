name: Build Workspace

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install gstreamer
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libatk1.0-dev libgtk-3-dev
        version: 2.0

    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          crates/c-api
          crates/gui
          crates/macros
          crates/ntscrs
          crates/openfx-plugin

    - name: Build
      run: cargo build --release --workspace

    - name: Build OpenFX plugin
      run: cargo run --bin build-plugin -- --release

    - name: Archive Linux OpenFX plugin
      uses: actions/upload-artifact@v3
      with:
        name: ntsc-rs-linux-openfx
        path: crates/openfx-plugin/build/

    - name: Archive Linux binary
      uses: actions/upload-artifact@v3
      with:
        name: ntsc-rs-linux-standalone
        path: target/release/ntsc-rs-standalone

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install gstreamer
      run: |
        choco install gstreamer gstreamer-devel
        echo "C:\gstreamer\1.0\msvc_x86_64\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          crates/c-api
          crates/gui
          crates/macros
          crates/ntscrs
          crates/openfx-plugin

    - name: Build
      run: cargo build --release --workspace

    - name: Build OpenFX plugin
      run: cargo run --bin build-plugin -- --release

    - name: Archive Windows OpenFX plugin
      uses: actions/upload-artifact@v3
      with:
        name: ntsc-rs-windows-openfx
        path: crates/openfx-plugin/build/

    - name: Package Windows binary
      run: |
        mkdir ntsc-rs-windows-standalone
        cd ntsc-rs-windows-standalone
        robocopy C:\gstreamer\1.0\msvc_x86_64 .\ *.dll /s /copy:DT; if ($lastexitcode -lt 8) { $global:LASTEXITCODE = $null }
        cp ..\target\release\ntsc-rs-standalone.exe .\bin\
        cp ..\target\release\ntsc-rs-launcher.exe .\
        cd ..
        Compress-Archive -Path ntsc-rs-windows-standalone -DestinationPath ntsc-rs-windows-standalone.zip

    - name: Archive Windows binary
      uses: actions/upload-artifact@v3
      with:
        name: ntsc-rs-windows-standalone
        path: ntsc-rs-windows-standalone.zip

  build-ae-plugin:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Setup
      run: |
        python -m pip install meson ninja
        meson --version
        $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\ProgramData\chocolatey\bin"
        [Environment]::SetEnvironmentVariable("Path", $env:PATH, "Machine")
        choco install gpg4win
        echo "C:\Program Files (x86)\Gpg4win\..\GnuPG\bin" >> $env:GITHUB_PATH

    - name: Get SDK
      env:
        WIN_SDK_KEY: ${{ secrets.WIN_SDK_KEY }}
      run: |
        git fetch origin blobs
        git checkout origin/blobs -- sdkwin.zip.gpg
        gpg --quiet --batch --yes --decrypt --passphrase="$Env:WIN_SDK_KEY" --output=sdkwin.zip sdkwin.zip.gpg
        Expand-Archive sdkwin.zip .\ae-plugin\sdk\
        mv '.\ae-plugin\sdk\Adobe After Effects CC 15.0 Win SDK\*' .\ae-plugin\sdk\

    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64

    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          crates/c-api
          crates/gui
          crates/macros
          crates/ntscrs
          crates/openfx-plugin

    - name: Build
      run: |
        cd .\ae-plugin
        meson setup build
        cd build
        meson configure --buildtype=release
        meson compile

    - name: Archive Windows AE plugin
      uses: actions/upload-artifact@v3
      with:
        name: ntsc-rs-windows-afterfx
        path: ae-plugin/build/ntsc-rs-ae.aex

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build-windows
      - build-linux
      - build-ae-plugin

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Download artifacts
      uses: actions/download-artifact@v3
      working-directory: ./artifacts

    - name: Zip artifacts
      run: for dir in */; do zip -r "$dir.zip" "./$dir"; done
      working-directory: ./artifacts

    - name: Display structure of downloaded files
      run: ls -l
      working-directory: ./artifacts

    - name: Create release
      uses: ncipollo/release-action@v1
      working-directory: ./artifacts
      with:
        artifacts: "ntsc-rs-*-standalone.zip,ntsc-rs-*-openfx.zip,ntsc-rs-*-afterfx.zip"
